// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------- ENUMS -----------------

enum Role {
  PATIENT
  DOCTOR
  RECEPTIONIST
  ADMIN
}

enum AppointmentStatus {
  REQUESTED    // Mới yêu cầu, chờ xác nhận
  CONFIRMED    // Đã xác nhận
  CHECKED_IN   // Đã đến làm thủ tục
  COMPLETED    // Đã hoàn thành
  CANCELLED    // Đã hủy
  NO_SHOW      // Không đến
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  ONLINE
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SmokingStatus {
  NON_SMOKER
  FORMER_SMOKER
  CURRENT_SMOKER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Relationship {
  SELF        // Bản thân
  SPOUSE      // Vợ/Chồng
  CHILD       // Con
  PARENT      // Bố/Mẹ
  SIBLING     // Anh/Chị/Em
  RELATIVE    // Họ hàng
  FRIEND      // Bạn bè
  OTHER       // Khác
}



// ----------------- CORE MODELS -----------------

/// Bảng User: Chỉ dùng để xác thực và quản lý vai trò.
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  phone     String?  @unique // SĐT đăng nhập/khôi phục
  password  String
  role      Role

  // Quan hệ 1-1 với các hồ sơ chuyên môn
  doctorProfile       DoctorProfile?
  receptionistProfile ReceptionistProfile?

  // Quan hệ 1-nhiều: Một user có thể quản lý nhiều hồ sơ bệnh nhân
  patientProfiles     PatientProfile[]

  // Quan hệ với giao dịch
  transactions        Transaction[]

  isVerified  Boolean  @default(false)
  verifiedAt  DateTime?
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

/// Hồ sơ Bác sĩ: Chứa TẤT CẢ thông tin về một bác sĩ.
model DoctorProfile {
  id            Int      @id @default(autoincrement())

  // Thông tin cá nhân của bác sĩ
  firstName     String
  lastName      String
  dateOfBirth   DateTime? @db.Date
  gender        Gender?
  avatar        String?

  // Thông tin chuyên môn
  specialty     String
  experience    String?
  contactInfo   String?

  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])

  // Quan hệ
  clinicId        Int?
  clinic          Clinic?              @relation("ClinicDoctors", fields: [clinicId], references: [id])
  appointments    Appointment[]        @relation("DoctorAppointments")
  feedbacks       Feedback[]           @relation("DoctorFeedbacks")
  prescriptions   Prescription[]
  services        DoctorService[]      @relation("Services")
  availabilities  DoctorAvailability[]
  overrides       AvailabilityOverride[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

/// Hồ sơ Lễ tân: Chứa TẤT CẢ thông tin về một lễ tân.
model ReceptionistProfile {
  id            Int      @id @default(autoincrement())

  // Thông tin cá nhân của lễ tân
  firstName     String
  lastName      String
  dateOfBirth   DateTime? @db.Date
  gender        Gender?
  avatar        String?

  // Thông tin công việc
  shift         String?

  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/// Hồ sơ Bệnh nhân: Chứa TẤT CẢ thông tin y tế và cá nhân của một bệnh nhân.
model PatientProfile {
  id           Int      @id @default(autoincrement())

  // Thông tin cá nhân
  firstName    String
  lastName     String
  dateOfBirth  DateTime @db.Date
  gender       Gender
  phone        String   // SĐT liên lạc y tế (không cần unique)
  relationship Relationship // Mối quan hệ với người quản lý
  avatar       String?

  // Thông tin bổ sung
  idCardNumber String?
  occupation   String?
  nationality  String?
  address      String?

  // Thông tin sức khỏe
  healthDetailsJson Json?          // Lưu các thông tin linh hoạt khác

  // Quan hệ
  managerId    Int
  manager      User          @relation(fields: [managerId], references: [id])
  isPrimary    Boolean       @default(false) // Là hồ sơ chính của người quản lý?
  appointments  Appointment[]
  prescriptions Prescription[]
  feedbacks     Feedback[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([phone]) // Tối ưu tìm kiếm theo SĐT
}


// ----------------- SCHEDULING MODELS -----------------

/// Lịch làm việc cố định hàng tuần của bác sĩ
model DoctorAvailability {
  id        Int       @id @default(autoincrement())
  dayOfWeek DayOfWeek
  startTime String
  endTime   String

  doctorId  Int
  doctor    DoctorProfile @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, dayOfWeek])
}

/// Ghi đè lịch làm việc cho một ngày cụ thể (nghỉ, làm thêm)
model AvailabilityOverride {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  startTime String?
  endTime   String?

  doctorId  Int
  doctor    DoctorProfile @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, date])
}


// ----------------- APPOINTMENT & RELATED MODELS -----------------

/// Lịch hẹn khám bệnh: Linh hoạt cho cả khách có hồ sơ và khách vãng lai.
model Appointment {
  id            Int      @id @default(autoincrement())
  date          DateTime @db.Date
  startTime     String
  endTime       String
  status        AppointmentStatus
  paymentStatus PaymentStatus
  notes         String?

  // Liên kết tùy chọn với hồ sơ bệnh nhân
  patientProfileId Int?
  patientProfile   PatientProfile? @relation(fields: [patientProfileId], references: [id])

  // Thông tin bắt buộc cho mọi cuộc hẹn (kể cả khách vãng lai)
  patientName   String
  patientDob    DateTime @db.Date
  patientPhone  String
  patientGender String

  // Quan hệ
  doctorId      Int
  doctor        DoctorProfile @relation("DoctorAppointments", fields: [doctorId], references: [id])
  serviceId     Int
  service       Service     @relation(fields: [serviceId], references: [id])
  clinicId      Int
  clinic        Clinic      @relation("ClinicAppointments", fields: [clinicId], references: [id])
  billing       Billing?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


/// Đơn thuốc: Gắn với một hồ sơ bệnh nhân cụ thể.
model Prescription {
  id        Int      @id @default(autoincrement())
  notes     String?

  doctorId      Int
  doctor        DoctorProfile  @relation(fields: [doctorId], references: [id])

  patientProfileId Int
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])

  items     PrescriptionItem[]
  createdAt DateTime       @default(now())
}

/// Feedback: Gắn với một hồ sơ bệnh nhân cụ thể.
model Feedback {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?

  patientProfileId Int
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id])

  doctorId  Int
  doctor    DoctorProfile @relation("DoctorFeedbacks", fields: [doctorId], references: [id])

  createdAt DateTime @default(now())
}

// ----------------- OTHER MODELS (Giữ nguyên hoặc ít thay đổi) -----------------

model Service {
  id            Int      @id @default(autoincrement())
  name          String
  price         Float
  duration      Int      // thời lượng (phút)
  description   String?
  appointments  Appointment[]
  doctorService DoctorService[] @relation("Doctor")
}

model DoctorService {
  id         Int      @id @default(autoincrement())
  doctorId   Int
  doctor     DoctorProfile @relation("Services", fields: [doctorId], references: [id])
  serviceId  Int
  service    Service  @relation("Doctor", fields: [serviceId], references: [id])
  createdAt  DateTime @default(now())
  @@unique([doctorId, serviceId])
}

model Billing {
  id            Int      @id @default(autoincrement())
  amount        Float
  status        PaymentStatus
  paymentMethod PaymentMethod?
  notes         String?
  appointmentId Int      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Medicine {
  id                Int      @id @default(autoincrement())
  name              String
  dosage            String?
  stock             Int
  price             Float
  prescriptionItems PrescriptionItem[]
}

model PrescriptionItem {
  id             Int      @id @default(autoincrement())
  quantity       Int
  instructions   String?
  prescriptionId Int
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicineId     Int
  medicine       Medicine @relation(fields: [medicineId], references: [id])
}

model Clinic {
  id           Int      @id @default(autoincrement())
  name         String
  address      String
  phone        String?
  email        String?
  description  String?
  isActive     Boolean  @default(true)
  doctors      DoctorProfile[] @relation("ClinicDoctors")
  appointments Appointment[]   @relation("ClinicAppointments")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

/// Giao dịch thanh toán (SEPAY, tiền mặt, ...)
model Transaction {
  id          Int      @id @default(autoincrement())
  amount Float
  method String // online, cash, card
  status String // pending, success, failed

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

/// Bài viết do admin tạo (tin tức, bài sức khỏe, ...)
model Article {
  id          Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Khuyến mãi / voucher
model Promotion {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  description String?
  discount    Float
  validFrom   DateTime
  validTo     DateTime
}
