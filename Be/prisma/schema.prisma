// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum vai trò người dùng trong hệ thống
enum Role {
  PATIENT // Bệnh nhân
  DOCTOR // Bác sĩ
  RECEPTIONIST // Lễ tân
  ADMIN // Quản trị viên
}

enum Period {
  MORNING
  AFTERNOON
}

enum AppointmentStatus {
  PENDING
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  TRANSFER
  COUNTER
}

/// Bảng người dùng chung cho toàn hệ thống
model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  phone       String?   @unique
  password    String
  role        Role
  firstName   String
  lastName    String
  avatar      String?
  status      String?
  address     String?
  dateOfBirth DateTime?
  gender      String?
  isVerified  Boolean   @default(false)
  verifiedAt  DateTime?
  lastLoginAt DateTime?

  // Quan hệ
  doctorProfile       DoctorProfile?
  receptionistProfile ReceptionistProfile?
  appointments        Appointment[]        @relation("PatientAppointments")
  feedbacks           Feedback[]           @relation("PatientFeedbacks")
  prescriptions       Prescription[]       @relation("PatientPrescriptions")
  transactions        Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

/// Hồ sơ lễ tân, gắn 1-1 với User (role = RECEPTIONIST)
model ReceptionistProfile {
  id          Int       @id @default(autoincrement())
  shift   String?
  contact String?

  userId Int @unique
  user   User @relation(fields: [userId], references: [id])
}

/// Hồ sơ bác sĩ, gắn 1-1 với User (role = DOCTOR)
model DoctorProfile {
  id          Int       @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  //not needed for a small clinic where add doctors share the same specialty
  specialty     String
  experience    String?
  contactInfo   String?

  userId Int @unique
  user   User @relation(fields: [userId], references: [id])

  // Quan hệ với cơ sở phòng khám
  clinicId Int?
  clinic   Clinic? @relation("ClinicDoctors", fields: [clinicId], references: [id])

  appointments  Appointment[]  @relation("DoctorAppointments")
  feedbacks     Feedback[]     @relation("DoctorFeedbacks")
  prescriptions Prescription[]
  services      DoctorService[] @relation("Services")
  timeslots     Timeslot[] @relation("DoctorTimeslot")
  specialTimeslots SpecialTimeslot[] @relation("DoctorSpecialTimeslot")
  schedules     DoctorSchedule[] @relation("DoctorSchedules")
}

model DoctorService {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  doctorId    Int
  doctor      DoctorProfile @relation("Services", fields: [doctorId], references: [id])

  serviceId   Int
  service     Service @relation("Doctor", fields: [serviceId], references: [id])
}

model Timeslot {
  id          Int       @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  slot          Int
  period        Period

  doctorId      Int
  doctor        DoctorProfile @relation("DoctorTimeslot", fields: [doctorId], references: [id])
}

model SpecialTimeslot {
  id            Int @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  slot          Int
  day           DateTime
  period        Period

  doctorId      Int
  doctor        DoctorProfile @relation("DoctorSpecialTimeslot", fields: [doctorId], references: [id])
}

/// Lịch trình thực tế của bác sĩ (thời gian đã bị chiếm bởi appointments)
model DoctorSchedule {
  id            Int       @id @default(autoincrement())
  date          DateTime  // Ngày
  startTime     String    // Thời gian bắt đầu (HH:mm)
  endTime       String    // Thời gian kết thúc (HH:mm)
  isAvailable   Boolean   @default(true) // Còn trống hay đã bị chiếm
  notes         String?   // Ghi chú (nghỉ phép, họp, ...)

  doctorId      Int
  doctor        DoctorProfile @relation("DoctorSchedules", fields: [doctorId], references: [id])

  // Quan hệ với appointment (nếu bị chiếm bởi appointment)
  appointmentId Int?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

/// Dịch vụ khám (khám tổng quát, khám tim mạch, ...)
model Service {
  id          Int       @id @default(autoincrement())
  name          String
  price         Float
  duration      Int // thời lượng (phút)
  description   String?

  appointments  Appointment[]
  doctorService DoctorService[] @relation("Doctor")
}

/// Lịch hẹn khám bệnh
model Appointment {
  id          Int       @id @default(autoincrement())
  date          DateTime
  startTime     String   // Thời gian bắt đầu (HH:mm format)
  status        AppointmentStatus
  paymentStatus PaymentStatus
  notes         String?

  // Thông tin người đặt lịch (có thể là user đã đăng ký hoặc khách vãng lai)
  patientId     Int? // Optional - nếu là user đã đăng ký
  patient       User? @relation("PatientAppointments", fields: [patientId], references: [id])

  // Thông tin bắt buộc cho người đặt lịch
  patientName   String // Họ tên
  patientDob    DateTime // Ngày sinh
  patientPhone  String // Số điện thoại
  patientGender String // Giới tính

  doctorId      Int
  doctor        DoctorProfile @relation("DoctorAppointments", fields: [doctorId], references: [id])

  serviceId     Int
  service       Service @relation(fields: [serviceId], references: [id])

  // Quan hệ với cơ sở phòng khám
  clinicId      Int
  clinic        Clinic @relation("ClinicAppointments", fields: [clinicId], references: [id])

  // Quan hệ với hóa đơn
  billing       Billing?

  // Quan hệ với lịch trình bác sĩ
  schedule      DoctorSchedule?
}

/// Hóa đơn thanh toán
model Billing {
  id            Int       @id @default(autoincrement())
  amount        Float     // Số tiền
  status        PaymentStatus // PENDING, PAID, REFUNDED
  paymentMethod PaymentMethod? // TRANSFER, COUNTER
  notes         String?

  appointmentId Int       @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

/// Thuốc trong hệ thống
model Medicine {
  id          Int       @id @default(autoincrement())
  name   String
  dosage String?
  stock  Int
  price  Float

  prescriptionItems PrescriptionItem[]
}

/// Đơn thuốc do bác sĩ kê cho bệnh nhân
model Prescription {
  id          Int       @id @default(autoincrement())
  notes String?

  doctorId Int
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id])

  patientId Int
  patient   User @relation("PatientPrescriptions", fields: [patientId], references: [id])

  items PrescriptionItem[]
}

/// Chi tiết từng loại thuốc trong đơn thuốc
model PrescriptionItem {
  id          Int       @id @default(autoincrement())
  quantity     Int
  instructions String?

  prescriptionId Int
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])

  medicineId Int
  medicine   Medicine @relation(fields: [medicineId], references: [id])
}

/// Feedback từ bệnh nhân cho bác sĩ
model Feedback {
  id          Int       @id @default(autoincrement())
  rating    Int // số sao (1-5)
  comment   String?

  patientId Int
  patient   User @relation("PatientFeedbacks", fields: [patientId], references: [id])

  doctorId  Int
  doctor    DoctorProfile @relation("DoctorFeedbacks", fields: [doctorId], references: [id])

  createdAt DateTime @default(now())
}

/// Giao dịch thanh toán (SEPAY, tiền mặt, ...)
model Transaction {
  id          Int       @id @default(autoincrement())
  amount Float
  method String // online, cash, card
  status String // pending, success, failed

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

/// Bài viết do admin tạo (tin tức, bài sức khỏe, ...)
model Article {
  id          Int       @id @default(autoincrement())
  title     String
  content   String
  image     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Khuyến mãi / voucher
model Promotion {
  id          Int       @id @default(autoincrement())
  code        String   @unique
  description String?
  discount    Float
  validFrom   DateTime
  validTo     DateTime
}



/// Cơ sở phòng khám
model Clinic {
  id          Int       @id @default(autoincrement())
  name        String    // Tên cơ sở
  address     String    // Địa chỉ chi tiết
  phone       String?   // Số điện thoại liên hệ
  email       String?   // Email liên hệ
  description String?   // Mô tả cơ sở
  isActive    Boolean   @default(true) // Trạng thái hoạt động

  // Quan hệ với bác sĩ
  doctors     DoctorProfile[] @relation("ClinicDoctors")

  // Quan hệ với lịch hẹn
  appointments Appointment[] @relation("ClinicAppointments")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}
